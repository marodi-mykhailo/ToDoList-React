{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/authReduer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","features/StartPage/StartPage.tsx","app/App.tsx","app/store.ts","index.tsx","features/Login/Login.module.css","features/StartPage/StartPage.module.css","features/TodolistsList/TodoList.module.css","assets/image/tdl.png","assets/image/welcome.svg","assets/image/logo.png","assets/image/todo.png"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","removeTaskAC","removeTaskTC","addTaskAC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","s","img","src","alt","wrapp","spacing","justify","alignContent","tl","allTodolistTasks","margin","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","left","welcome","right","formWrapp","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","getFieldProps","FormControlLabel","control","StartPage","section","h1","todo","link","btn","App","logOutHandler","AppBar","position","logo","LinearProgress","Container","fixed","path","render","exact","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b9eb4418.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1a3237fe-e721-4f8c-aaca-8ad848347a2d',\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n\r\n///// AUTH API //////\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeType>>('/auth/me')\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.login(data)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(true))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            }else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error)=>{\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\nexport const logOutTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.logOut()\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            }else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error)=>{\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n\n// types\n\nexport type setIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\n\ntype ActionsType =  setIsLoggedInActionType| SetAppStatusActionType | SetAppErrorActionType\n\n","import {setIsLoggedInAC} from \"../features/Login/authReduer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.status}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: true | false\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (status: boolean) => ({type: 'APP/SET-IS-INITIALIZED', status} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        dispatch(setIsInitializedAC(true));\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n        }\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setIsInitializedAC>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() =>\r\n            props.removeTask(props.task.id, props.todolistId),\r\n        [props]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [demo, props.todolist.id, dispatch])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id),\r\n        [props])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id),\r\n        [props])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id),\r\n        [props])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport s from './TodoList.module.css';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport img from '../../assets/image/tdl.png'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [demo, isLoggedIn, dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/startPage'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <img className={s.img} src={img} alt={''}/>\r\n        <div className={s.wrapp}>\r\n            <Grid container spacing={3} justify={'space-between'} alignContent={'center'}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id]\r\n\r\n                        return <Grid item style={{margin: \"0 auto\"}} key={tl.id}>\r\n                            <Paper elevation={5} style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    todolist={tl}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </div>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button} from '@material-ui/core'\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./authReduer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\"\nimport s from './Login.module.css'\nimport welcome from '../../assets/image/welcome.svg';\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    type FormikErrorType = {\n        email?: string\n        password?: string\n        rememberMe?: boolean\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Password is Required';\n            } else if (values.password.length < 3) {\n                errors.password = 'Password must be at least 3 symbols';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n\n    return (\n        <div className={s.wrapp}>\n            <div className={s.left}>\n                <img src={welcome} alt={''} className={s.img}/>\n            </div>\n            <div className={s.right}>\n                <div className={s.formWrapp}>\n                    <form onSubmit={formik.handleSubmit}>\n                        <FormControl>\n                            <FormLabel>\n                                <p>To log in get registered\n                                    <a href={'https://social-network.samuraijs.com/'}\n                                       target={'_blank'}\n                                       rel=\"noopener noreferrer\"\n                                    >here\n                                    </a>\n                                </p>\n                                <p>or use common test account credentials:</p>\n                                <p>Email: free@samuraijs.com</p>\n                                <p>Password: free</p>\n                            </FormLabel>\n                            <FormGroup>\n                                <TextField\n                                    label=\"Email\"\n                                    margin=\"normal\"\n                                    {...formik.getFieldProps('email')}\n                                />\n                                {formik.errors.email ?\n                                    <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\n                                <TextField\n                                    type=\"password\"\n                                    label=\"Password\"\n                                    margin=\"normal\"\n                                    {...formik.getFieldProps('password')}\n                                />\n                                {formik.errors.password ?\n                                    <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\n                                <FormControlLabel\n                                    label={'Remember me'}\n                                    control={<Checkbox\n                                        {...formik.getFieldProps('rememberMe')}\n                                    />}\n                                />\n                                <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                            </FormGroup>\n                        </FormControl>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n\n\n}\n","import React from 'react';\nimport s from './StartPage.module.css'\nimport todo from '../../assets/image/todo.png'\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\n\nconst img = 'https://techcrunch.com/wp-content/uploads/2011/11/any-do-logo-name.png?w=730&crop=1'\n\n\nconst StartPage = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n    return (\n        <section className={s.section}>\n            <h1 className={s.h1}>Organize it all with <span>Any.do</span></h1>\n            <img className={s.img} src={todo} alt={''}/>\n\n            <NavLink className={s.link} to={'/login'}>\n                <button className={s.btn}>\n                    Start\n                </button>\n            </NavLink>\n        </section>\n    );\n};\n\nexport default StartPage;\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, CircularProgress, Container, LinearProgress} from '@material-ui/core'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {NavLink, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {logOutTC} from \"../features/Login/authReduer\";\r\nimport logo from '../assets/image/logo.png'\r\nimport StartPage from \"../features/StartPage/StartPage\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const logOutHandler = useCallback(() => {\r\n        dispatch(logOutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <div className={'wrapp'}>\r\n                    <img className={'img'} src={logo} alt={''}/>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\r\n                    {isLoggedIn ||\r\n                    <Button color=\"inherit\"><NavLink className={'link'} to={'/login'}>Log In</NavLink></Button>}\r\n                </div>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container className={'container'} fixed>\r\n                <Switch>\r\n                    <Route path={'/startPage'} render={() => <StartPage/>}/>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404 Page not found</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/authReduer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapp\":\"Login_wrapp__RgL7y\",\"left\":\"Login_left__d9Jma\",\"img\":\"Login_img__3ANCm\",\"right\":\"Login_right__1HSC7\",\"formWrapp\":\"Login_formWrapp__1VIAV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"h1\":\"StartPage_h1__29U-U\",\"section\":\"StartPage_section__1Ba8d\",\"img\":\"StartPage_img__D4W2g\",\"btn\":\"StartPage_btn__3olVI\",\"link\":\"StartPage_link__18WbO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapp\":\"TodoList_wrapp__13ojv\",\"img\":\"TodoList_img__3GJx2\"};","module.exports = __webpack_public_path__ + \"static/media/tdl.a16cb5ed.png\";","module.exports = __webpack_public_path__ + \"static/media/welcome.2409ca6b.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.7a3f22b8.png\";","module.exports = __webpack_public_path__ + \"static/media/todo.e9278ccc.png\";"],"sourceRoot":""}