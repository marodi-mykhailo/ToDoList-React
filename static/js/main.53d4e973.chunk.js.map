{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","features/Login/authReduer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/StartPage/StartPage.tsx","app/App.tsx","app/store.ts","index.tsx","features/StartPage/StartPage.module.css","features/TodolistsList/TodoList.module.css","assets/image/tdl.png","assets/image/logo.png","assets/image/todo.png"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","setAppErrorAC","setAppStatusAC","removeTodolistAC","id","changeTodolistTitleAC","title","setTodolistsAC","todolists","initTasksAC","tasks","removeTaskAC","taskId","todolistId","updateTaskTC","domainModel","dispatch","getState","task","find","t","apiModel","model","updateTaskAC","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","activateViewMode","autoFocus","onKeyDown","key","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","addTask","todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","sort","a","b","order","map","style","paddingTop","Button","TodolistsList","useSelector","state","useDispatch","thunk","todoListId","minOrder","reduce","minTask","currentTask","newTask","uuidv4","addedDate","Date","toISOString","undefined","addTaskTC","changeStatus","newTitle","action","addTodolist","min","current","addTodolistTC","Grid","container","padding","s","img","src","alt","wrapp","spacing","justify","alignContent","tl","allTodolistTasks","item","margin","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","StartPage","fileInputRef","useRef","Array","isArray","section","h1","todo","btnWrapper","accept","file","target","files","reader","FileReader","onload","result","json","JSON","parse","data","every","list","length","hasMandatoryProperties","statusAndPriorityValid","Object","values","includes","output","forEach","todolistWithoutTasks","push","alert","readAsText","ref","display","btn","click","useStyles","makeStyles","customTooltip","fontSize","App","classes","useEffect","then","res","resultCode","AppBar","position","logo","Tooltip","tooltip","jsonData","assignTasksToTodolists","jsonString","stringify","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","removeChild","revokeObjectURL","LinearProgress","Container","fixed","path","render","exact","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","copyState","entityStatus","auth","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.53d4e973.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\nimport {TodolistDomainType} from \"../features/TodolistsList/todolists-reducer\";\n\nconst settings = {\n    withCredentials: true,\n    headers: {\n        'API-KEY': '1a3237fe-e721-4f8c-aaca-8ad848347a2d',\n    }\n}\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    ...settings\n})\n\n// api\nexport const todolistsAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>('todo-lists');\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\n    },\n    deleteTodolist(id: string) {\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\n    },\n    updateTodolist(id: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n    createTask(todolistId: string, taskTitile: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\n// types\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport interface TodolistTypeExtended extends TodolistDomainType {\n    tasks: TaskType[]\n}\n\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    Completed = 1,\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    High = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    title: string\n    status: TaskStatuses\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    title: string\n    status: TaskStatuses\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n\n\n///// AUTH API //////\n\nexport type LoginParamsType = {\n    email: string,\n    password: string,\n    rememberMe: boolean\n    captcha?: string\n}\n\nexport type AuthMeType = {\n    id: number\n    email: string\n    login: string\n}\n\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return instance.post<ResponseType<{ userId: number }>>('/auth/login', data)\n    },\n    me() {\n        return instance.get<ResponseType<AuthMeType>>('/auth/me')\n    },\n    logOut() {\n        return instance.delete<ResponseType>('/auth/login')\n    }\n}\n","import {Dispatch} from 'redux'\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.login(data)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(true))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            }else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error)=>{\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\nexport const logOutTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.logOut()\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            }else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error)=>{\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n\n// types\n\nexport type setIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\n\ntype ActionsType =  setIsLoggedInActionType| SetAppStatusActionType | SetAppErrorActionType\n\n","import {setIsLoggedInAC} from \"../features/Login/authReduer\";\nimport {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/todolists-api\";\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        case \"APP/SET-IS-INITIALIZED\":\n            return {...state, isInitialized: action.status}\n        default:\n            return {...state}\n    }\n}\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type InitialStateType = {\n    // происходит ли сейчас взаимодействие с сервером\n    status: RequestStatusType\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\n    error: string | null\n    isInitialized: true | false\n}\n\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\nexport const setIsInitializedAC = (status: boolean) => ({type: 'APP/SET-IS-INITIALIZED', status} as const)\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me().then(res => {\n        dispatch(setIsInitializedAC(true));\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true));\n        } else {\n        }\n    })\n}\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n\ntype ActionsType =\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n    | ReturnType<typeof setIsInitializedAC>\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\nimport {Action, Dispatch} from 'redux'\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {v4 as uuidv4} from 'uuid';\n\nconst initialState: Array<TodolistDomainType> | null = null\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> | null = initialState, action: ActionsType): Array<TodolistDomainType> | null => {\n    switch (action.type) {\n        case \"INIT-TODOLIST\":\n            return []\n        case 'REMOVE-TODOLIST':\n            return state!.filter(tl => tl.id !== action.id)\n        case 'ADD-TODOLIST':\n            return [{...action.todolist, filter: 'all'}, ...state!]\n        case 'CHANGE-TODOLIST-TITLE':\n            return state!.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n        case 'CHANGE-TODOLIST-FILTER':\n            return state!.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\n            return state!.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\n        case 'SET-TODOLISTS':\n            return action.todolists.map(tl => ({...tl, filter: tl.filter || \"all\", entityStatus: 'idle'}))\n        default:\n            return state\n    }\n}\n\n// actions\nexport const initTodolistAC = () => ({type: 'INIT-TODOLIST'} as const)\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\n    type: 'CHANGE-TODOLIST-TITLE',\n    id,\n    title\n} as const)\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\n    type: 'CHANGE-TODOLIST-FILTER',\n    id,\n    filter\n} as const)\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\n} as const)\nexport const setTodolistsAC = (todolists: Array<TodolistDomainType>) => ({type: 'SET-TODOLISTS', todolists} as const)\n\n// thunks\n// export const fetchTodolistsTC = () => {\n//     return (dispatch: ThunkDispatch) => {\n//         dispatch(setAppStatusAC('loading'))\n//         todolistsAPI.getTodolists()\n//             .then((res) => {\n//                 dispatch(setTodolistsAC(res.data))\n//                 dispatch(setAppStatusAC('succeeded'))\n//             })\n//     }\n// }\nexport const removeTodolistTC = (todolistId: string) => {\n    return (dispatch: ThunkDispatch) => {\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\n        dispatch(setAppStatusAC('loading'))\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n        todolistsAPI.deleteTodolist(todolistId)\n            .then(() => {\n                dispatch(removeTodolistAC(todolistId))\n                //скажем глобально приложению, что асинхронная операция завершена\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\nexport const addTodolistTC = (title: string): ThunkAction<void, AppRootStateType, unknown, Action<string>> => {\n    return (dispatch: ThunkDispatch, getState) => {\n        dispatch(setAppStatusAC('loading'))\n\n        const minOrder = getState().todolists!.reduce((min, current) => {\n            return current.order < min ? current.order : min;\n        }, getState().todolists![0]?.order);\n\n        dispatch(addTodolistAC({\n            title, id: uuidv4(), order: minOrder === undefined ? 0 : minOrder - 1, addedDate: new Date().toISOString()\n        }))\n        dispatch(setAppStatusAC('succeeded'))\n    }\n}\nexport const changeTodolistTitleTC = (id: string, title: string) => {\n    return (dispatch: Dispatch<ActionsType>) => {\n        todolistsAPI.updateTodolist(id, title)\n            .then(() => {\n                dispatch(changeTodolistTitleAC(id, title))\n            })\n    }\n}\n\n// types\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\ntype ActionsType =\n    | ReturnType<typeof initTodolistAC>\n    | RemoveTodolistActionType\n    | AddTodolistActionType\n    | ReturnType<typeof changeTodolistTitleAC>\n    | ReturnType<typeof changeTodolistFilterAC>\n    | SetTodolistsActionType\n    | ReturnType<typeof changeTodolistEntityStatusAC>\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n}\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\nimport {Dispatch} from 'redux'\nimport {AppRootStateType} from '../../app/store'\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {v4 as uuidv4} from 'uuid';\n\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case \"INIT-TASKS\":\n            return action.tasks\n        case 'REMOVE-TASK':\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\n        case 'ADD-TASK':\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case 'UPDATE-TASK':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case 'ADD-TODOLIST':\n            return {...state, [action.todolist.id]: []}\n        case 'REMOVE-TODOLIST':\n            const copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        case 'SET-TODOLISTS': {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n        }\n        case 'SET-TASKS':\n            return {...state, [action.todolistId]: action.tasks}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const initTasksAC = (tasks: TasksStateType) => ({type: 'INIT-TASKS', tasks} as const)\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\nexport const addTaskAC = (task: TaskType) =>\n    ({type: 'ADD-TASK', task} as const)\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\n\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\n\n// thunks\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.getTasks(todolistId)\n        .then((res) => {\n            const tasks = res.data.items\n            dispatch(setTasksAC(tasks, todolistId))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    todolistsAPI.deleteTask(todolistId, taskId)\n        .then(() => {\n            const action = removeTaskAC(taskId, todolistId)\n            dispatch(action)\n        })\n}\nexport const addTaskTC = (title: string, todoListId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>, getState: () => AppRootStateType) => {\n    dispatch(setAppStatusAC('loading'))\n    const tasks = getState().tasks[todoListId];\n    const minOrder = tasks.reduce((minTask, currentTask) => {\n        return currentTask.order < minTask.order ? currentTask : minTask;\n    }, tasks[0])?.order;\n\n\n    const newTask = {\n        todoListId,\n        id: uuidv4(),\n        addedDate: new Date().toISOString(),\n        status: TaskStatuses.New,\n        title: title,\n        order: minOrder === undefined ? 0 : minOrder - 1\n    } as TaskType\n\n    dispatch(addTaskAC(newTask))\n    dispatch(setAppStatusAC('succeeded'))\n}\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            //throw new Error(\"task not found in the state\");\n            console.warn('task not found in the state')\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            title: task.title,\n            status: task.status,\n            ...domainModel\n        }\n        const action = updateTaskAC(taskId, apiModel, todolistId)\n        dispatch(action)\n    }\n\n// types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ActionsType =\n    | ReturnType<typeof initTasksAC>\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | ReturnType<typeof setTasksAC>\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from '@material-ui/core';\nimport {AddBox} from '@material-ui/icons';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItemHandler = () => {\n        if (title.trim() !== \"\") {\n            addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItemHandler();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   disabled={disabled}\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n        />\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\n            <AddBox/>\n        </IconButton>\n    </div>\n})\n","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyDownHandler = (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (e.key === 'Enter') {\n            activateViewMode()\n        }\n    }\n\n    return editMode\n        ? <TextField value={title} onChange={changeTitle} autoFocus onKeyDown={onKeyDownHandler}\n                     onBlur={activateViewMode}/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n});\n","import React, {ChangeEvent, useCallback} from 'react'\nimport {Checkbox, IconButton} from '@material-ui/core'\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\nimport {Delete} from '@material-ui/icons'\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = useCallback(() =>\n            props.removeTask(props.task.id, props.todolistId),\n        [props]);\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n    }, [props]);\n\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\n    }, [props]);\n\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\n        <Checkbox\n            checked={props.task.status === TaskStatuses.Completed}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})\n","import React, {useCallback} from 'react'\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\nimport {Button, IconButton} from '@material-ui/core'\nimport {Delete} from '@material-ui/icons'\nimport {Task} from './Task/Task'\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\n\ntype PropsType = {\n    todolist: TodolistDomainType\n    tasks: Array<TaskType>\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    demo?: boolean\n}\n\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.todolist.id)\n    }, [props])\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.todolist.id)\n    }\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.todolist.id, title)\n    }, [props])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id),\n        [props])\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id),\n        [props])\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id),\n        [props])\n\n\n    let tasksForTodolist = props.tasks\n    if (props.todolist.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.todolist.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    return <div>\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask}/>\n        <div>\n            {\n                tasksForTodolist.sort((a, b) => a.order - b.order).map(t => <Task key={t.id} task={t}\n                                                                                  todolistId={props.todolist.id}\n                                                                                  removeTask={props.removeTask}\n                                                                                  changeTaskTitle={props.changeTaskTitle}\n                                                                                  changeTaskStatus={props.changeTaskStatus}\n                />)\n            }\n        </div>\n        <div style={{paddingTop: '10px'}}>\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'default'}\n            >All\n            </Button>\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n","import React, {useCallback} from 'react'\nimport s from './TodoList.module.css';\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\nimport {\n    addTodolistTC,\n    changeTodolistFilterAC,\n    changeTodolistTitleAC,\n    FilterValuesType,\n    removeTodolistAC,\n    TodolistDomainType\n} from './todolists-reducer'\nimport {addTaskTC, removeTaskAC, TasksStateType, updateTaskTC} from './tasks-reducer'\nimport {TaskStatuses} from '../../api/todolists-api'\nimport {Grid, Paper} from '@material-ui/core'\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\nimport {Todolist} from './Todolist/Todolist'\nimport img from '../../assets/image/tdl.png'\nimport {Redirect} from \"react-router-dom\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType> | null>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const dispatch = useDispatch()\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        dispatch(removeTaskAC(id, todolistId))\n    }, [dispatch])\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        const thunk = addTaskTC(title, todolistId)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        const thunk = updateTaskTC(id, {status}, todolistId)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC(todolistId, value)\n        dispatch(action)\n    }, [dispatch])\n\n    const removeTodolist = useCallback(function (id: string) {\n        dispatch(removeTodolistAC(id))\n    }, [dispatch])\n\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\n        dispatch(changeTodolistTitleAC(id, title))\n    }, [dispatch])\n\n    const addTodolist = useCallback((title: string) => {\n        const thunk = addTodolistTC(title)\n        dispatch(thunk)\n    }, [dispatch])\n\n    if (!todolists) {\n        return <Redirect to={'/startPage'}/>\n    }\n\n    return <>\n        <Grid container style={{padding: '20px'}}>\n            <AddItemForm addItem={addTodolist}/>\n        </Grid>\n        <img className={s.img} src={img} alt={''}/>\n        <div className={s.wrapp}>\n            <Grid container spacing={3} justify={'space-between'} alignContent={'center'}>\n                {\n                    todolists!.map((tl: TodolistDomainType) => {\n                        let allTodolistTasks = tasks[tl.id]\n\n                        return <Grid item style={{margin: \"0 auto\"}} key={tl.id}>\n                            <Paper elevation={5} style={{padding: '10px'}}>\n                                <Todolist\n                                    todolist={tl}\n                                    tasks={allTodolistTasks}\n                                    removeTask={removeTask}\n                                    changeFilter={changeFilter}\n                                    addTask={addTask}\n                                    changeTaskStatus={changeStatus}\n                                    removeTodolist={removeTodolist}\n                                    changeTaskTitle={changeTaskTitle}\n                                    changeTodolistTitle={changeTodolistTitle}\n                                    demo={demo}\n                                />\n                            </Paper>\n                        </Grid>\n                    })\n                }\n            </Grid>\n        </div>\n    </>\n}\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\nimport {setAppErrorAC} from '../../app/app-reducer'\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    //const [open, setOpen] = React.useState(true)\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC(null));\n    }\n\n\n    const isOpen = error !== null;\n\n    return (\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React, {useRef} from 'react';\nimport s from './StartPage.module.css'\nimport todo from '../../assets/image/todo.png'\nimport {Redirect} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {initTodolistAC, setTodolistsAC, TodolistDomainType} from \"../TodolistsList/todolists-reducer\";\nimport {TaskStatuses, TaskType, TodolistTypeExtended} from \"../../api/todolists-api\";\nimport {initTasksAC} from \"../TodolistsList/tasks-reducer\";\n\n\nconst StartPage = () => {\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType> | null>(state => state.todolists)\n    const dispatch = useDispatch()\n\n    const onCreateHandle = () => dispatch(initTodolistAC())\n\n    const fileInputRef = useRef<HTMLInputElement>(null);\n\n    const verifyTodoListsArray = (data: any): data is TodolistTypeExtended => {\n        if (!Array.isArray(data)) {\n            return false;\n        }\n\n        return data.every((list) => {\n            // Basic structure checks for TodoList\n            if (!('id' in list && 'title' in list && 'tasks' in list && 'filter' in list && Array.isArray(list.tasks))) {\n                return false;\n            }\n\n            // Allow tasks to be an empty array\n            if (list.tasks.length === 0) {\n                return true;\n            }\n\n            // Check each task in the list\n            return list.tasks.every((task: TaskType) => {\n                // id and todoListId must be non-empty strings\n                if (typeof task.id !== 'string' || task.id === '' || typeof task.todoListId !== 'string' || task.todoListId === '') {\n                    return false;\n                }\n\n                // Other properties can be empty strings, but they must exist\n                const hasMandatoryProperties = 'title' in task && 'status' in task && 'order' in task && 'addedDate' in task;\n                const statusAndPriorityValid = 'status' in task && Object.values(TaskStatuses).includes(task.status)\n\n                return hasMandatoryProperties && statusAndPriorityValid;\n            });\n        });\n    };\n\n    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files ? event.target.files[0] : null;\n        if (!file) {\n            alert('No file selected');\n            return;\n        }\n\n        // FileReader to read the file content\n        const reader = new FileReader();\n        reader.onload = async (event: ProgressEvent<FileReader>) => {\n            if (event.target?.result) {\n                try {\n                    const json = JSON.parse(event.target.result as string) as {\n                        'todolists': Array<TodolistTypeExtended>\n                    };\n\n                    if (verifyTodoListsArray(json.todolists)) {\n                        const output: {\n                            todolists: TodolistDomainType[],\n                            tasks: { [todolistId: string]: TaskType[] }\n                        } = {todolists: [], tasks: {}};\n\n                        json.todolists.forEach((todolist) => {\n                            const {tasks, ...todolistWithoutTasks} = todolist;\n                            output.todolists.push(todolistWithoutTasks);\n\n                            if (!output.tasks[todolist.id]) {\n                                output.tasks[todolist.id] = [];\n                            }\n                            output.tasks[todolist.id].push(...tasks);\n                        });\n\n\n                        dispatch(setTodolistsAC(output.todolists))\n                        dispatch(initTasksAC(output.tasks))\n\n                    } else {\n                        console.error('JSON does not match the TodoList structure');\n                        alert('JSON does not match the TodoList structure');\n                    }\n\n\n                    // Optionally, process or upload the JSON data here\n                    // For example, call uploadFileToServer(json) if you're uploading the parsed content\n                } catch (error) {\n                    console.error('Error parsing JSON:', error);\n                    alert('Error parsing JSON file');\n                }\n            }\n        };\n        reader.readAsText(file);\n    };\n    const handleButtonClick = () => {\n        fileInputRef.current?.click(); // Programmatically click the hidden file input\n    };\n\n\n    if (Array.isArray(todolists)) {\n        return <Redirect to={'/'}/>\n\n    }\n\n\n    return (\n        <section className={s.section}>\n            <h1 className={s.h1}>Organize it all with <span>Any.do</span></h1>\n            <img className={s.img} src={todo} alt={''}/>\n            <div className={s.btnWrapper}>\n\n\n                <input\n                    type=\"file\"\n                    accept=\".json\"\n                    onChange={handleFileChange}\n                    ref={fileInputRef}\n                    style={{display: 'none'}} // Hide the file input\n                />\n\n                <button className={s.btn} onClick={handleButtonClick}>\n                    Load TodoList JSON\n                </button>\n\n                <button className={s.btn} onClick={onCreateHandle}>\n                    Create new TodoList\n                </button>\n            </div>\n        </section>\n    );\n};\n\nexport default StartPage;\n","import React, {useEffect, useRef} from 'react'\nimport './App.css'\nimport {AppBar, CircularProgress, Container, IconButton, LinearProgress, makeStyles, Tooltip} from '@material-ui/core'\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from './store'\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport logo from '../assets/image/logo.png'\nimport StartPage from \"../features/StartPage/StartPage\";\nimport PublishIcon from '@material-ui/icons/Publish';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport {setTodolistsAC, TodolistDomainType} from \"../features/TodolistsList/todolists-reducer\";\nimport {TaskStatuses, TaskType, TodolistType, TodolistTypeExtended} from \"../api/todolists-api\";\nimport {initTasksAC, TasksStateType} from \"../features/TodolistsList/tasks-reducer\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nconst useStyles = makeStyles(() => ({\n    customTooltip: {\n        fontSize: \"1rem\", // Customize the font size here\n    }\n}));\n\nfunction App({demo = false}: PropsType) {\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n    const dispatch = useDispatch()\n\n    const todolists = useSelector<AppRootStateType, Array<TodolistType> | null>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n\n\n    const classes = useStyles()\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [dispatch])\n\n    const fileInputRef = useRef<HTMLInputElement>(null);\n\n    const verifyTodoListsArray = (data: any): data is TodolistTypeExtended => {\n        if (!Array.isArray(data)) {\n            return false;\n        }\n\n        return data.every((list) => {\n            // Basic structure checks for TodoList\n            if (!('id' in list && 'title' in list && 'tasks' in list && 'filter' in list && Array.isArray(list.tasks))) {\n                return false;\n            }\n\n            // Allow tasks to be an empty array\n            if (list.tasks.length === 0) {\n                return true;\n            }\n\n            // Check each task in the list\n            return list.tasks.every((task: TaskType) => {\n                // id and todoListId must be non-empty strings\n                if (typeof task.id !== 'string' || task.id === '' || typeof task.todoListId !== 'string' || task.todoListId === '') {\n                    return false;\n                }\n\n                // Other properties can be empty strings, but they must exist\n                const hasMandatoryProperties = 'title' in task && 'status' in task && 'order' in task && 'addedDate' in task;\n                const statusAndPriorityValid = 'status' in task && Object.values(TaskStatuses).includes(task.status)\n\n                return hasMandatoryProperties && statusAndPriorityValid;\n            });\n        });\n    };\n\n    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files ? event.target.files[0] : null;\n        if (!file) {\n            alert('No file selected');\n            return;\n        }\n\n        // FileReader to read the file content\n        const reader = new FileReader();\n        reader.onload = async (event: ProgressEvent<FileReader>) => {\n            if (event.target?.result) {\n                try {\n                    const json = JSON.parse(event.target.result as string) as {\n                        'todolists': Array<TodolistTypeExtended>\n                    };\n\n                    if (verifyTodoListsArray(json.todolists)) {\n                        const output: {\n                            todolists: TodolistDomainType[],\n                            tasks: { [todolistId: string]: TaskType[] }\n                        } = {todolists: [], tasks: {}};\n\n                        json.todolists.forEach((todolist) => {\n                            const {tasks, ...todolistWithoutTasks} = todolist;\n                            output.todolists.push(todolistWithoutTasks);\n\n                            if (!output.tasks[todolist.id]) {\n                                output.tasks[todolist.id] = [];\n                            }\n                            output.tasks[todolist.id].push(...tasks);\n                        });\n\n\n                        dispatch(setTodolistsAC(output.todolists))\n                        dispatch(initTasksAC(output.tasks))\n\n                    } else {\n                        console.error('JSON does not match the TodoList structure');\n                        alert('JSON does not match the TodoList structure');\n                    }\n\n\n                    // Optionally, process or upload the JSON data here\n                    // For example, call uploadFileToServer(json) if you're uploading the parsed content\n                } catch (error) {\n                    console.error('Error parsing JSON:', error);\n                    alert('Error parsing JSON file');\n                }\n            }\n        };\n        reader.readAsText(file);\n    };\n    const handleButtonClick = () => {\n        fileInputRef.current?.click(); // Programmatically click the hidden file input\n    };\n\n    const downloadJson = () => {\n        if (Array.isArray(todolists)) {\n            const assignTasksToTodolists = (todolists: TodolistType[], tasks: TasksStateType): TodolistType[] => {\n                return todolists.map(todolist => ({\n                    ...todolist,\n                    tasks: tasks[todolist.id],\n                }));\n            }\n\n            const jsonData = assignTasksToTodolists(todolists, tasks)\n            // Convert the JSON data to a string\n            const jsonString = JSON.stringify({\"todolists\": jsonData}, null, 2);\n            // Create a Blob from the JSON string\n            const blob = new Blob([jsonString], {type: 'application/json'});\n            // Create a URL for the Blob\n            const url = URL.createObjectURL(blob);\n            // Create a temporary <a> element and trigger the download\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = 'todolist.json'; // The file name for the download\n            document.body.appendChild(link); // Required for Firefox\n            link.click();\n            document.body.removeChild(link); // Clean up\n            URL.revokeObjectURL(url); // Free up memory\n        }\n\n    };\n\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            <ErrorSnackbar/>\n            <AppBar position=\"static\">\n                <div className={'wrapp'}>\n                    <img className={'img'} src={logo} alt={''}/>\n                    {\n                        Array.isArray(todolists) && <div>\n                            <Tooltip title=\"Upload Todo list JSON\" classes={{tooltip: classes.customTooltip}}>\n                                <IconButton color={'inherit'} onClick={handleButtonClick}>\n                                    <input\n                                        type=\"file\"\n                                        accept=\".json\"\n                                        onChange={handleFileChange}\n                                        ref={fileInputRef}\n                                        style={{display: 'none'}} // Hide the file input\n                                    />\n                                    <PublishIcon/>\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Dowloand Todo list JSON\" classes={{tooltip: classes.customTooltip}}>\n                                <IconButton color={'inherit'} onClick={downloadJson}>\n                                    <GetAppIcon/>\n                                </IconButton>\n                            </Tooltip>\n                        </div>\n                    }\n\n                </div>\n                {status === 'loading' && <LinearProgress/>}\n            </AppBar>\n            <Container className={'container'} fixed>\n                <Switch>\n                    <Route path={'/startPage'} render={() => <StartPage/>}/>\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\n                    <Route path={'/404'} render={() => <h1>404 Page not found</h1>}/>\n                    <Redirect from={'*'} to={'/404'}/>\n                </Switch>\n            </Container>\n        </div>\n    )\n}\n\nexport default App;\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from './app-reducer'\nimport {authReducer} from \"../features/Login/authReduer\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './app/App';\nimport {store} from './app/store';\nimport {Provider} from 'react-redux';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"h1\":\"StartPage_h1__29U-U\",\"section\":\"StartPage_section__1Ba8d\",\"img\":\"StartPage_img__D4W2g\",\"btnWrapper\":\"StartPage_btnWrapper__3mx2Q\",\"btn\":\"StartPage_btn__3olVI\",\"link\":\"StartPage_link__18WbO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapp\":\"TodoList_wrapp__13ojv\",\"img\":\"TodoList_img__3GJx2\"};","module.exports = __webpack_public_path__ + \"static/media/tdl.a16cb5ed.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.7a3f22b8.png\";","module.exports = __webpack_public_path__ + \"static/media/todo.e9278ccc.png\";"],"sourceRoot":""}